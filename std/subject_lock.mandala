import SubjectManager._
import core.Id
import core.Id._
import Either.Either
import core.sys.Sys.Entry
import core.Equal._
import Lock
import EntryLock


module SubjectLock {
    //Warning: If a Locked#(id,val) is generated and nobody can generate an auth token for the id then val is lost forever
    global(create) local(consume, inspect) data Locked[T](owner:Subject, val:T)

    global function lock[T](owner:Subject, consume val:T) = Locked#(owner, val)

    global transactional function unlock[T](consume locked:Locked[T], accessToken:AuthenticationToken):T {
        let (owner, val)@locked in match owner == accessToken.subject with
         | False => rollback(val)
         | True => val
    }

    global function safeUnlock[T](consume locked:Locked[T], accessToken:AuthenticationToken):(res:Either[T, Locked[T]]) {
        try unlock(!locked, accessToken) with
          | success(val) => Either#Left(val)
          | failure(lock) => Either#Right(lock)
    }

    instance LockForSubjectLock[T] for Lock[Subject,T,AuthenticationToken,Locked[T]]{
        implement lock with lock[T]
        implement unlock with unlock[T]
        implement safeUnlock with safeUnlock[T]
    }

    global function lockEntry[persisted T](owner:Subject, id:Id.Private, consume val:T) = Entry#(id, Locked#(owner,val))

    global transactional function unlockEntry[persisted T](consume entry:Entry[Locked[T]], accessToken:AuthenticationToken):(id:Id.Private, val:T){
        let (id, locked)@entry in (id, unlock(locked, accessToken))
    }

    instance EntryLockForSubjectLock[persisted T] for EntryLock[Subject,T,AuthenticationToken,Locked[T]]{
        implement lockEntry with lockEntry[T]
        implement unlockEntry with unlockEntry[T]
    }
}