import core.Id._
import core.sys.Ids.authenticatedMessage
import core.sys.EdDsa._
import core.sys.Sys.Context
import SubjectManager._
import Issuer
import Option._

//Note: this is not really a system module
//      but we need the hash on the local_server/wallet side to generate subjects
//      and this is the easiest way to make this module recognizable without manually coping hashes around
system(15) module EdDsaIssuer {

    global primitive data AuthInfo(pk:Pk, sig:Sig)

    global function subjectFor(pk:Pk):(subject:ValidatedSubject) {
        validateSubject(authenticatedMessage(SubjectRequest#(derivePublicId(pk))))
    }

    global overloaded transactional function authenticateWith(pk:Pk, sig:Sig, implicit ctx:Context):(token:AuthenticationToken) {
         match verifyTx(ctx, pk, sig) with
          | False => rollback
          | True => authenticate(authenticatedMessage(AuthenticationRequest#(derivePublicId(pk))))
    }

    global overloaded transactional function authenticateWith(authInfo:AuthInfo, implicit context ctx:Context):(token:AuthenticationToken) {
         let (pk, sig)@authInfo in authenticateWith(pk, sig)
    }

    global overloaded function safeAuthenticateWith(pk:Pk, sig:Sig, implicit context ctx:Context):(token:Option[AuthenticationToken]) {
         try authenticateWith(pk, sig) with
          | success(token) => Option#Some(token)
          | failure => Option#None
    }

    global overloaded transactional function safeAuthenticateWith(authInfo:AuthInfo, implicit context ctx:Context):(token:Option[AuthenticationToken]) {
         let (pk, sig)@authInfo in safeAuthenticateWith(pk, sig)
    }

    instance EdDsaIssuerIsIssuer for Issuer[Pk,AuthInfo] {
        implement subjectFor with subjectFor
        implement authenticateWith with authenticateWith
    }
}

transactional transaction EdDsaAuthenticate(pk:Pk, sig:Sig, implicit context ctx:Context):AuthenticationToken = EdDsaIssuer.authenticateWith(pk,sig)
transactional transaction EdDsaSubject(pk:Pk):Subject = EdDsaIssuer.subjectFor(pk).subject