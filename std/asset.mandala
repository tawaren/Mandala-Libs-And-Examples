import core.sys.Sys._
import core.Id
//Todo: Can we wrap and add into transformClass???
import core.sys.Ids._

//Assets have some tricks up there sleeves
// As each asset gets an Private Id they also have a subject over IdIssuer
// And thus we can do things like send tokens to whoever owns an asset
// And whoever can access the Asset, can access the Assets Private Id and thus can access the tokens
module Asset {
   global(inspect) local linear data Asset[T](id:Id.Private, assetData:T)

   guarded[T] transactional function mint[T](consume assetData:T, implicit consume ctx:Context):(res:Asset[T], newCtx:Context){
    let (id, newCtx) = uniqueID(ctx) in (Asset#(id, assetData), newCtx)
   }

   //We return assetData, so that it we are not restricted to affine assetData
   guarded[T] function burn[T](consume ass1:Asset[T]):T = let (id, assetData)@ass1 in assetData

   global function getId[T](ass1:Asset[T]):Id.Private = ass1.id
   global function getData[relevant T](ass1:Asset[T]):T = ass1.assetData

}